{"mappings":"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","sources":["<anon>","node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/adapters/sandbox.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequiref23a\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ePczV\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"FileHandle\", function () { return $acaf95e8186334bb$export$8bdd21c705ef8d22; });\n$parcel$export(module.exports, \"FolderHandle\", function () { return $acaf95e8186334bb$export$61db58e71d795906; });\n$parcel$export(module.exports, \"default\", function () { return $acaf95e8186334bb$export$2e2bcd8739ae039; });\n/* global Blob, DOMException */ \nvar $cFLn4 = parcelRequire(\"cFLn4\");\nconst { DISALLOWED: $acaf95e8186334bb$var$DISALLOWED } = (0, $cFLn4.errors);\nclass $acaf95e8186334bb$var$Sink {\n    /**\n   * @param {FileWriter} writer\n   * @param {FileEntry} fileEntry\n   */ constructor(writer, fileEntry){\n        this.writer = writer;\n        this.fileEntry = fileEntry;\n    }\n    /**\n   * @param {BlobPart | Object} chunk\n   */ async write(chunk) {\n        if (typeof chunk === 'object') {\n            if (chunk.type === 'write') {\n                if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n                    this.writer.seek(chunk.position);\n                    if (this.writer.position !== chunk.position) {\n                        await new Promise((resolve, reject)=>{\n                            this.writer.onwriteend = resolve;\n                            this.writer.onerror = reject;\n                            this.writer.truncate(chunk.position);\n                        });\n                        this.writer.seek(chunk.position);\n                    }\n                }\n                if (!('data' in chunk)) throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. write requires a data argument', 'SyntaxError');\n                chunk = chunk.data;\n            } else if (chunk.type === 'seek') {\n                if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n                    this.writer.seek(chunk.position);\n                    if (this.writer.position !== chunk.position) throw new DOMException('seeking position failed', 'InvalidStateError');\n                    return;\n                } else throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. seek requires a position argument', 'SyntaxError');\n            } else if (chunk.type === 'truncate') return new Promise((resolve)=>{\n                if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n                    this.writer.onwriteend = (evt)=>resolve();\n                    this.writer.truncate(chunk.size);\n                } else throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. truncate requires a size argument', 'SyntaxError');\n            });\n        }\n        await new Promise((resolve, reject)=>{\n            this.writer.onwriteend = resolve;\n            this.writer.onerror = reject;\n            this.writer.write(new Blob([\n                chunk\n            ]));\n        });\n    }\n    close() {\n        return new Promise(this.fileEntry.file.bind(this.fileEntry));\n    }\n}\nclass $acaf95e8186334bb$export$8bdd21c705ef8d22 {\n    /** @param {FileEntry} file */ constructor(file, writable = true){\n        this.file = file;\n        this.kind = 'file';\n        this.writable = writable;\n        this.readable = true;\n    }\n    get name() {\n        return this.file.name;\n    }\n    /**\n   * @param {{ file: { toURL: () => string; }; }} other\n   */ isSameEntry(other) {\n        return this.file.toURL() === other.file.toURL();\n    }\n    /** @return {Promise<File>} */ getFile() {\n        return new Promise(this.file.file.bind(this.file));\n    }\n    /** @return {Promise<Sink>} */ createWritable(opts) {\n        if (!this.writable) throw new DOMException(...$acaf95e8186334bb$var$DISALLOWED);\n        return new Promise((resolve, reject)=>this.file.createWriter((fileWriter)=>{\n                if (opts.keepExistingData === false) {\n                    fileWriter.onwriteend = (evt)=>resolve(new $acaf95e8186334bb$var$Sink(fileWriter, this.file));\n                    fileWriter.truncate(0);\n                } else resolve(new $acaf95e8186334bb$var$Sink(fileWriter, this.file));\n            }, reject));\n    }\n}\nclass $acaf95e8186334bb$export$61db58e71d795906 {\n    /** @param {DirectoryEntry} dir */ constructor(dir, writable = true){\n        this.dir = dir;\n        this.writable = writable;\n        this.readable = true;\n        this.kind = 'directory';\n        this.name = dir.name;\n    }\n    /** @param {FolderHandle} other */ isSameEntry(other) {\n        return this.dir.fullPath === other.dir.fullPath;\n    }\n    /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */ async *entries() {\n        const reader = this.dir.createReader();\n        const entries = await new Promise(reader.readEntries.bind(reader));\n        for (const x of entries)yield [\n            x.name,\n            x.isFile ? new $acaf95e8186334bb$export$8bdd21c705ef8d22(x, this.writable) : new $acaf95e8186334bb$export$61db58e71d795906(x, this.writable)\n        ];\n    }\n    /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FolderHandle>}\n   */ getDirectoryHandle(name, opts) {\n        return new Promise((resolve, reject)=>{\n            this.dir.getDirectory(name, opts, (dir)=>{\n                resolve(new $acaf95e8186334bb$export$61db58e71d795906(dir));\n            }, reject);\n        });\n    }\n    /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FileHandle>}\n   */ getFileHandle(name, opts) {\n        return new Promise((resolve, reject)=>this.dir.getFile(name, opts, (file)=>resolve(new $acaf95e8186334bb$export$8bdd21c705ef8d22(file)), reject));\n    }\n    /**\n   * @param {string} name\n   * @param {{ recursive: boolean; }} opts\n   */ async removeEntry(name, opts) {\n        /** @type {Error|FolderHandle|FileHandle} */ const entry = await this.getDirectoryHandle(name, {\n            create: false\n        }).catch((err)=>err.name === 'TypeMismatchError' ? this.getFileHandle(name, {\n                create: false\n            }) : err);\n        if (entry instanceof Error) throw entry;\n        return new Promise((resolve, reject)=>{\n            if (entry instanceof $acaf95e8186334bb$export$61db58e71d795906) opts.recursive ? entry.dir.removeRecursively(()=>resolve(), reject) : entry.dir.remove(()=>resolve(), reject);\n            else if (entry.file) entry.file.remove(()=>resolve(), reject);\n        });\n    }\n}\nvar $acaf95e8186334bb$export$2e2bcd8739ae039 = (opts = {})=>new Promise((resolve, reject)=>window.webkitRequestFileSystem(opts._persistent, 0, (e)=>resolve(new $acaf95e8186334bb$export$61db58e71d795906(e.root)), reject));\n\n});\n\n\n//# sourceMappingURL=sandbox.ec5ac095.js.map\n","/* global Blob, DOMException */\n\nimport { errors } from '../util.js'\n\nconst { DISALLOWED } = errors\n\nclass Sink {\n  /**\n   * @param {FileWriter} writer\n   * @param {FileEntry} fileEntry\n   */\n  constructor (writer, fileEntry) {\n    this.writer = writer\n    this.fileEntry = fileEntry\n  }\n\n  /**\n   * @param {BlobPart | Object} chunk\n   */\n  async write (chunk) {\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            await new Promise((resolve, reject) => {\n              this.writer.onwriteend = resolve\n              this.writer.onerror = reject\n              this.writer.truncate(chunk.position)\n            })\n            this.writer.seek(chunk.position)\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. write requires a data argument', 'SyntaxError')\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            throw new DOMException('seeking position failed', 'InvalidStateError')\n          }\n          return\n        } else {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. seek requires a position argument', 'SyntaxError')\n        }\n      } else if (chunk.type === 'truncate') {\n        return new Promise(resolve => {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            this.writer.onwriteend = evt => resolve()\n            this.writer.truncate(chunk.size)\n          } else {\n            throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. truncate requires a size argument', 'SyntaxError')\n          }\n        })\n      }\n    }\n    await new Promise((resolve, reject) => {\n      this.writer.onwriteend = resolve\n      this.writer.onerror = reject\n      this.writer.write(new Blob([chunk]))\n    })\n  }\n\n  close () {\n    return new Promise(this.fileEntry.file.bind(this.fileEntry))\n  }\n}\n\nexport class FileHandle {\n  /** @param {FileEntry} file */\n  constructor (file, writable = true) {\n    this.file = file\n    this.kind = 'file'\n    this.writable = writable\n    this.readable = true\n  }\n\n  get name () {\n    return this.file.name\n  }\n\n  /**\n   * @param {{ file: { toURL: () => string; }; }} other\n   */\n  isSameEntry (other) {\n    return this.file.toURL() === other.file.toURL()\n  }\n\n  /** @return {Promise<File>} */\n  getFile () {\n    return new Promise(this.file.file.bind(this.file))\n  }\n\n  /** @return {Promise<Sink>} */\n  createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n\n    return new Promise((resolve, reject) =>\n      this.file.createWriter(fileWriter => {\n        if (opts.keepExistingData === false) {\n          fileWriter.onwriteend = evt => resolve(new Sink(fileWriter, this.file))\n          fileWriter.truncate(0)\n        } else {\n          resolve(new Sink(fileWriter, this.file))\n        }\n      }, reject)\n    )\n  }\n}\n\nexport class FolderHandle {\n  /** @param {DirectoryEntry} dir */\n  constructor (dir, writable = true) {\n    this.dir = dir\n    this.writable = writable\n    this.readable = true\n    this.kind = 'directory'\n    this.name = dir.name\n  }\n\n  /** @param {FolderHandle} other */\n  isSameEntry (other) {\n    return this.dir.fullPath === other.dir.fullPath\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    const reader = this.dir.createReader()\n    const entries = await new Promise(reader.readEntries.bind(reader))\n    for (const x of entries) {\n      yield [x.name, x.isFile ? new FileHandle(x, this.writable) : new FolderHandle(x, this.writable)]\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FolderHandle>}\n   */\n  getDirectoryHandle (name, opts) {\n    return new Promise((resolve, reject) => {\n      this.dir.getDirectory(name, opts, dir => {\n        resolve(new FolderHandle(dir))\n      }, reject)\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FileHandle>}\n   */\n  getFileHandle (name, opts) {\n    return new Promise((resolve, reject) =>\n      this.dir.getFile(name, opts, file => resolve(new FileHandle(file)), reject)\n    )\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ recursive: boolean; }} opts\n   */\n  async removeEntry (name, opts) {\n    /** @type {Error|FolderHandle|FileHandle} */\n    const entry = await this.getDirectoryHandle(name, { create: false }).catch(err =>\n      err.name === 'TypeMismatchError' ? this.getFileHandle(name, { create: false }) : err\n    )\n\n    if (entry instanceof Error) throw entry\n\n    return new Promise((resolve, reject) => {\n      if (entry instanceof FolderHandle) {\n        opts.recursive\n          ? entry.dir.removeRecursively(() => resolve(), reject)\n          : entry.dir.remove(() => resolve(), reject)\n      } else if (entry.file) {\n        entry.file.remove(() => resolve(), reject)\n      }\n    })\n  }\n}\n\nexport default (opts = {}) => new Promise((resolve, reject) =>\n  window.webkitRequestFileSystem(\n    opts._persistent, 0,\n    e => resolve(new FolderHandle(e.root)),\n    reject\n  )\n)\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","value","$acaf95e8186334bb$export$8bdd21c705ef8d22","$acaf95e8186334bb$export$61db58e71d795906","$acaf95e8186334bb$export$2e2bcd8739ae039","DISALLOWED","$acaf95e8186334bb$var$DISALLOWED","$cFLn4","errors","$acaf95e8186334bb$var$Sink","writer","fileEntry","write","chunk","type","Number","isInteger","position","seek","Promise","resolve","reject","onwriteend","onerror","truncate","DOMException","data","size","evt","Blob","close","file","bind","writable","kind","readable","name","isSameEntry","other","toURL","getFile","createWritable","opts","createWriter","fileWriter","keepExistingData","dir","fullPath","entries","reader","createReader","x","readEntries","isFile","getDirectoryHandle","getDirectory","getFileHandle","removeEntry","entry","create","catch","err","Error","recursive","removeRecursively","remove","webkitRequestFileSystem","_persistent","root"],"version":3,"file":"sandbox.ec5ac095.js.map"}
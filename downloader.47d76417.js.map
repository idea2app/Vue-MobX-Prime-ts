{"mappings":"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","sources":["<anon>","node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/adapters/downloader.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequiref23a\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kYRgI\", function(module, exports) {\n\n$parcel$export(module.exports, \"FileHandle\", function () { return $f462bb480e1b4452$export$8bdd21c705ef8d22; });\n\nvar $cFLn4 = parcelRequire(\"cFLn4\");\n\nvar $a2zud = parcelRequire(\"a2zud\");\nconst { WritableStream: $f462bb480e1b4452$var$WritableStream, TransformStream: $f462bb480e1b4452$var$TransformStream, DOMException: $f462bb480e1b4452$var$DOMException, Blob: $f462bb480e1b4452$var$Blob } = (0, $a2zud.default);\nconst { GONE: $f462bb480e1b4452$var$GONE } = (0, $cFLn4.errors);\n// @ts-ignore - Don't match newer versions of Safari, but that's okay\nconst $f462bb480e1b4452$var$isOldSafari = /constructor/i.test(window.HTMLElement);\nclass $f462bb480e1b4452$export$8bdd21c705ef8d22 {\n    constructor(name = 'unkown'){\n        this.name = name;\n        this.kind = 'file';\n    }\n    async getFile() {\n        throw new $f462bb480e1b4452$var$DOMException(...$f462bb480e1b4452$var$GONE);\n    }\n    async isSameEntry(other) {\n        return this === other;\n    }\n    /**\n   * @param {object} [options={}]\n   */ async createWritable(options = {}) {\n        const sw = await navigator.serviceWorker?.getRegistration();\n        const link = document.createElement('a');\n        const ts = new $f462bb480e1b4452$var$TransformStream();\n        const sink = ts.writable;\n        link.download = this.name;\n        if ($f462bb480e1b4452$var$isOldSafari || !sw) {\n            /** @type {Blob[]} */ let chunks = [];\n            ts.readable.pipeTo(new $f462bb480e1b4452$var$WritableStream({\n                write (chunk) {\n                    chunks.push(new $f462bb480e1b4452$var$Blob([\n                        chunk\n                    ]));\n                },\n                close () {\n                    const blob = new $f462bb480e1b4452$var$Blob(chunks, {\n                        type: 'application/octet-stream; charset=utf-8'\n                    });\n                    chunks = [];\n                    link.href = URL.createObjectURL(blob);\n                    link.click();\n                    setTimeout(()=>URL.revokeObjectURL(link.href), 10000);\n                }\n            }));\n        } else {\n            const { writable: writable, readablePort: readablePort } = new $f462bb480e1b4452$var$RemoteWritableStream($f462bb480e1b4452$var$WritableStream);\n            // Make filename RFC5987 compatible\n            const fileName = encodeURIComponent(this.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A');\n            const headers = {\n                'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n                'content-type': 'application/octet-stream; charset=utf-8',\n                ...options.size ? {\n                    'content-length': options.size\n                } : {}\n            };\n            const keepAlive = setTimeout(()=>sw.active.postMessage(0), 10000);\n            ts.readable.pipeThrough(new $f462bb480e1b4452$var$TransformStream({\n                transform (chunk, ctrl) {\n                    if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk);\n                    const reader = new Response(chunk).body.getReader();\n                    const pump = (_)=>reader.read().then((e)=>e.done ? 0 : pump(ctrl.enqueue(e.value)));\n                    return pump();\n                }\n            })).pipeTo(writable).finally(()=>{\n                clearInterval(keepAlive);\n            });\n            // Transfer the stream to service worker\n            sw.active.postMessage({\n                url: sw.scope + fileName,\n                headers: headers,\n                readablePort: readablePort\n            }, [\n                readablePort\n            ]);\n            // Trigger the download with a hidden iframe\n            const iframe = document.createElement('iframe');\n            iframe.hidden = true;\n            iframe.src = sw.scope + fileName;\n            document.body.appendChild(iframe);\n        }\n        return sink.getWriter();\n    }\n}\n// Want to remove this postMessage hack, tell them u want transferable streams:\n// https://bugs.webkit.org/show_bug.cgi?id=215485\nconst $f462bb480e1b4452$var$WRITE = 0;\nconst $f462bb480e1b4452$var$PULL = 0;\nconst $f462bb480e1b4452$var$ERROR = 1;\nconst $f462bb480e1b4452$var$ABORT = 1;\nconst $f462bb480e1b4452$var$CLOSE = 2;\nclass $f462bb480e1b4452$var$MessagePortSink {\n    /** @param {MessagePort} port */ constructor(port){\n        port.onmessage = (event)=>this._onMessage(event.data);\n        this._port = port;\n        this._resetReady();\n    }\n    start(controller) {\n        this._controller = controller;\n        // Apply initial backpressure\n        return this._readyPromise;\n    }\n    write(chunk) {\n        const message = {\n            type: $f462bb480e1b4452$var$WRITE,\n            chunk: chunk\n        };\n        // Send chunk\n        this._port.postMessage(message, [\n            chunk.buffer\n        ]);\n        // Assume backpressure after every write, until sender pulls\n        this._resetReady();\n        // Apply backpressure\n        return this._readyPromise;\n    }\n    close() {\n        this._port.postMessage({\n            type: $f462bb480e1b4452$var$CLOSE\n        });\n        this._port.close();\n    }\n    abort(reason) {\n        this._port.postMessage({\n            type: $f462bb480e1b4452$var$ABORT,\n            reason: reason\n        });\n        this._port.close();\n    }\n    _onMessage(message) {\n        if (message.type === $f462bb480e1b4452$var$PULL) this._resolveReady();\n        if (message.type === $f462bb480e1b4452$var$ERROR) this._onError(message.reason);\n    }\n    _onError(reason) {\n        this._controller.error(reason);\n        this._rejectReady(reason);\n        this._port.close();\n    }\n    _resetReady() {\n        this._readyPromise = new Promise((resolve, reject)=>{\n            this._readyResolve = resolve;\n            this._readyReject = reject;\n        });\n        this._readyPending = true;\n    }\n    _resolveReady() {\n        this._readyResolve();\n        this._readyPending = false;\n    }\n    _rejectReady(reason) {\n        if (!this._readyPending) this._resetReady();\n        this._readyPromise.catch(()=>{});\n        this._readyReject(reason);\n        this._readyPending = false;\n    }\n}\nclass $f462bb480e1b4452$var$RemoteWritableStream {\n    constructor(WritableStream){\n        const channel = new MessageChannel();\n        this.readablePort = channel.port1;\n        this.writable = new WritableStream(new $f462bb480e1b4452$var$MessagePortSink(channel.port2));\n    }\n}\n\n});\n\n\n//# sourceMappingURL=downloader.47d76417.js.map\n","import { errors } from '../util.js'\nimport config from '../config.js'\n\nconst {\n  WritableStream,\n  TransformStream,\n  DOMException,\n  Blob\n} = config\n\nconst { GONE } = errors\n// @ts-ignore - Don't match newer versions of Safari, but that's okay\nconst isOldSafari = /constructor/i.test(window.HTMLElement)\n\nexport class FileHandle {\n  constructor (name = 'unkown') {\n    this.name = name\n    this.kind = 'file'\n  }\n\n  async getFile () {\n    throw new DOMException(...GONE)\n  }\n\n  async isSameEntry(other) {\n    return this === other\n  }\n\n  /**\n   * @param {object} [options={}]\n   */\n  async createWritable (options = {}) {\n    const sw = await navigator.serviceWorker?.getRegistration()\n    const link = document.createElement('a')\n    const ts = new TransformStream()\n    const sink = ts.writable\n\n    link.download = this.name\n\n    if (isOldSafari || !sw) {\n      /** @type {Blob[]} */\n      let chunks = []\n      ts.readable.pipeTo(new WritableStream({\n        write (chunk) {\n          chunks.push(new Blob([chunk]))\n        },\n        close () {\n          const blob = new Blob(chunks, { type: 'application/octet-stream; charset=utf-8' })\n          chunks = []\n          link.href = URL.createObjectURL(blob)\n          link.click()\n          setTimeout(() => URL.revokeObjectURL(link.href), 10000)\n        }\n      }))\n    } else {\n      const { writable, readablePort } = new RemoteWritableStream(WritableStream)\n      // Make filename RFC5987 compatible\n      const fileName = encodeURIComponent(this.name).replace(/['()]/g, escape).replace(/\\*/g, '%2A')\n      const headers = {\n        'content-disposition': \"attachment; filename*=UTF-8''\" + fileName,\n        'content-type': 'application/octet-stream; charset=utf-8',\n        ...(options.size ? { 'content-length': options.size } : {})\n      }\n\n      const keepAlive = setTimeout(() => sw.active.postMessage(0), 10000)\n\n      ts.readable.pipeThrough(new TransformStream({\n        transform (chunk, ctrl) {\n          if (chunk instanceof Uint8Array) return ctrl.enqueue(chunk)\n          const reader = new Response(chunk).body.getReader()\n          const pump = _ => reader.read().then(e => e.done ? 0 : pump(ctrl.enqueue(e.value)))\n          return pump()\n        }\n      })).pipeTo(writable).finally(() => {\n        clearInterval(keepAlive)\n      })\n\n      // Transfer the stream to service worker\n      sw.active.postMessage({\n        url: sw.scope + fileName,\n        headers,\n        readablePort\n      }, [readablePort])\n\n      // Trigger the download with a hidden iframe\n      const iframe = document.createElement('iframe')\n      iframe.hidden = true\n      iframe.src = sw.scope + fileName\n      document.body.appendChild(iframe)\n    }\n\n    return sink.getWriter()\n  }\n}\n\n// Want to remove this postMessage hack, tell them u want transferable streams:\n// https://bugs.webkit.org/show_bug.cgi?id=215485\n\nconst WRITE = 0\nconst PULL = 0\nconst ERROR = 1\nconst ABORT = 1\nconst CLOSE = 2\n\nclass MessagePortSink {\n  /** @param {MessagePort} port */\n  constructor (port) {\n    port.onmessage = event => this._onMessage(event.data)\n    this._port = port\n    this._resetReady()\n  }\n\n  start (controller) {\n    this._controller = controller\n    // Apply initial backpressure\n    return this._readyPromise\n  }\n\n  write (chunk) {\n    const message = { type: WRITE, chunk }\n\n    // Send chunk\n    this._port.postMessage(message, [chunk.buffer])\n\n    // Assume backpressure after every write, until sender pulls\n    this._resetReady()\n\n    // Apply backpressure\n    return this._readyPromise\n  }\n\n  close () {\n    this._port.postMessage({ type: CLOSE })\n    this._port.close()\n  }\n\n  abort (reason) {\n    this._port.postMessage({ type: ABORT, reason })\n    this._port.close()\n  }\n\n  _onMessage (message) {\n    if (message.type === PULL) this._resolveReady()\n    if (message.type === ERROR) this._onError(message.reason)\n  }\n\n  _onError (reason) {\n    this._controller.error(reason)\n    this._rejectReady(reason)\n    this._port.close()\n  }\n\n  _resetReady () {\n    this._readyPromise = new Promise((resolve, reject) => {\n      this._readyResolve = resolve\n      this._readyReject = reject\n    })\n    this._readyPending = true\n  }\n\n  _resolveReady () {\n    this._readyResolve()\n    this._readyPending = false\n  }\n\n  _rejectReady (reason) {\n    if (!this._readyPending) this._resetReady()\n    this._readyPromise.catch(() => {})\n    this._readyReject(reason)\n    this._readyPending = false\n  }\n}\n\nclass RemoteWritableStream {\n  constructor (WritableStream) {\n    const channel = new MessageChannel()\n    this.readablePort = channel.port1\n    this.writable = new WritableStream(\n      new MessagePortSink(channel.port2)\n    )\n  }\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","Object","defineProperty","get","$f462bb480e1b4452$export$8bdd21c705ef8d22","set","s","enumerable","configurable","$cFLn4","WritableStream","$f462bb480e1b4452$var$WritableStream","TransformStream","$f462bb480e1b4452$var$TransformStream","DOMException","$f462bb480e1b4452$var$DOMException","Blob","$f462bb480e1b4452$var$Blob","$a2zud","default","GONE","$f462bb480e1b4452$var$GONE","errors","$f462bb480e1b4452$var$isOldSafari","test","HTMLElement","name","kind","getFile","isSameEntry","other","createWritable","options","sw","navigator","serviceWorker","getRegistration","link","document","createElement","ts","sink","writable","download","chunks","readable","pipeTo","write","chunk","push","close","blob","type","href","URL","createObjectURL","click","setTimeout","revokeObjectURL","readablePort","$f462bb480e1b4452$var$RemoteWritableStream","fileName","encodeURIComponent","replace","escape","headers","size","keepAlive","active","postMessage","pipeThrough","transform","ctrl","Uint8Array","enqueue","reader","Response","body","getReader","pump","_","read","then","e","done","value","finally","clearInterval","url","scope","iframe","hidden","src","appendChild","getWriter","$f462bb480e1b4452$var$MessagePortSink","port","onmessage","event","_onMessage","data","_port","_resetReady","start","controller","_controller","_readyPromise","buffer","abort","reason","message","_resolveReady","_onError","error","_rejectReady","Promise","resolve","reject","_readyResolve","_readyReject","_readyPending","catch","channel","MessageChannel","port1","port2"],"version":3,"file":"downloader.47d76417.js.map"}
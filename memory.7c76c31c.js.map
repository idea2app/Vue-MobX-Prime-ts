{"mappings":"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","sources":["<anon>","node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/adapters/memory.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequiref23a\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"eIbxT\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"Sink\", function () { return $ab5e2177693188e6$export$e287445474a1d9bf; });\n$parcel$export(module.exports, \"FileHandle\", function () { return $ab5e2177693188e6$export$8bdd21c705ef8d22; });\n$parcel$export(module.exports, \"FolderHandle\", function () { return $ab5e2177693188e6$export$61db58e71d795906; });\n$parcel$export(module.exports, \"default\", function () { return $ab5e2177693188e6$export$2e2bcd8739ae039; });\n\nvar $cFLn4 = parcelRequire(\"cFLn4\");\n\nvar $a2zud = parcelRequire(\"a2zud\");\nconst { File: $ab5e2177693188e6$var$File, Blob: $ab5e2177693188e6$var$Blob, DOMException: $ab5e2177693188e6$var$DOMException } = (0, $a2zud.default);\nconst { INVALID: $ab5e2177693188e6$var$INVALID, GONE: $ab5e2177693188e6$var$GONE, MISMATCH: $ab5e2177693188e6$var$MISMATCH, MOD_ERR: $ab5e2177693188e6$var$MOD_ERR, SYNTAX: $ab5e2177693188e6$var$SYNTAX, SECURITY: $ab5e2177693188e6$var$SECURITY, DISALLOWED: $ab5e2177693188e6$var$DISALLOWED } = (0, $cFLn4.errors);\nclass $ab5e2177693188e6$export$e287445474a1d9bf {\n    /**\n   * @param {FileHandle} fileHandle\n   * @param {File} file\n   */ constructor(fileHandle, file){\n        this.fileHandle = fileHandle;\n        this.file = file;\n        this.size = file.size;\n        this.position = 0;\n    }\n    write(chunk) {\n        let file = this.file;\n        if (typeof chunk === 'object') {\n            if (chunk.type === 'write') {\n                if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n                    this.position = chunk.position;\n                    if (this.size < chunk.position) this.file = new $ab5e2177693188e6$var$File([\n                        this.file,\n                        new ArrayBuffer(chunk.position - this.size)\n                    ], this.file.name, this.file);\n                }\n                if (!('data' in chunk)) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$SYNTAX('write requires a data argument'));\n                chunk = chunk.data;\n            } else if (chunk.type === 'seek') {\n                if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n                    if (this.size < chunk.position) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$INVALID);\n                    this.position = chunk.position;\n                    return;\n                } else throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$SYNTAX('seek requires a position argument'));\n            } else if (chunk.type === 'truncate') {\n                if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n                    file = chunk.size < this.size ? new $ab5e2177693188e6$var$File([\n                        file.slice(0, chunk.size)\n                    ], file.name, file) : new $ab5e2177693188e6$var$File([\n                        file,\n                        new Uint8Array(chunk.size - this.size)\n                    ], file.name);\n                    this.size = file.size;\n                    if (this.position > file.size) this.position = file.size;\n                    this.file = file;\n                    return;\n                } else throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$SYNTAX('truncate requires a size argument'));\n            }\n        }\n        chunk = new $ab5e2177693188e6$var$Blob([\n            chunk\n        ]);\n        let blob = this.file;\n        // Calc the head and tail fragments\n        const head = blob.slice(0, this.position);\n        const tail = blob.slice(this.position + chunk.size);\n        // Calc the padding\n        let padding = this.position - head.size;\n        if (padding < 0) padding = 0;\n        blob = new $ab5e2177693188e6$var$File([\n            head,\n            new Uint8Array(padding),\n            chunk,\n            tail\n        ], blob.name);\n        this.size = blob.size;\n        this.position += chunk.size;\n        this.file = blob;\n    }\n    close() {\n        if (this.fileHandle._deleted) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        this.fileHandle._file = this.file;\n        this.file = this.position = this.size = null;\n        if (this.fileHandle.onclose) this.fileHandle.onclose(this.fileHandle);\n    }\n}\nclass $ab5e2177693188e6$export$8bdd21c705ef8d22 {\n    constructor(name = '', file = new $ab5e2177693188e6$var$File([], name), writable = true){\n        this._file = file;\n        this.name = name;\n        this.kind = 'file';\n        this._deleted = false;\n        this.writable = writable;\n        this.readable = true;\n    }\n    async getFile() {\n        if (this._deleted) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        return this._file;\n    }\n    async createWritable(opts) {\n        if (!this.writable) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$DISALLOWED);\n        if (this._deleted) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        const file = opts.keepExistingData ? await this.getFile() : new $ab5e2177693188e6$var$File([], this.name);\n        return new $ab5e2177693188e6$export$e287445474a1d9bf(this, file);\n    }\n    async isSameEntry(other) {\n        return this === other;\n    }\n    async _destroy() {\n        this._deleted = true;\n        this._file = null;\n    }\n}\nclass $ab5e2177693188e6$export$61db58e71d795906 {\n    /** @param {string} name */ constructor(name, writable = true){\n        this.name = name;\n        this.kind = 'directory';\n        this._deleted = false;\n        /** @type {Object.<string, (FolderHandle|FileHandle)>} */ this._entries = {};\n        this.writable = writable;\n        this.readable = true;\n    }\n    /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */ async *entries() {\n        if (this._deleted) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        yield* Object.entries(this._entries);\n    }\n    async isSameEntry(other) {\n        return this === other;\n    }\n    /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */ async getDirectoryHandle(name, opts) {\n        if (this._deleted) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        const entry = this._entries[name];\n        if (entry) {\n            if (entry instanceof $ab5e2177693188e6$export$8bdd21c705ef8d22) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$MISMATCH);\n            else return entry;\n        } else {\n            if (opts.create) return this._entries[name] = new $ab5e2177693188e6$export$61db58e71d795906(name);\n            else throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        }\n    }\n    /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */ async getFileHandle(name, opts) {\n        const entry = this._entries[name];\n        const isFile = entry instanceof $ab5e2177693188e6$export$8bdd21c705ef8d22;\n        if (entry && isFile) return entry;\n        if (entry && !isFile) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$MISMATCH);\n        if (!entry && !opts.create) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        if (!entry && opts.create) return this._entries[name] = new $ab5e2177693188e6$export$8bdd21c705ef8d22(name);\n    }\n    async removeEntry(name, opts) {\n        const entry = this._entries[name];\n        if (!entry) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$GONE);\n        await entry._destroy(opts.recursive);\n        delete this._entries[name];\n    }\n    async _destroy(recursive) {\n        for (let x of Object.values(this._entries)){\n            if (!recursive) throw new $ab5e2177693188e6$var$DOMException(...$ab5e2177693188e6$var$MOD_ERR);\n            await x._destroy(recursive);\n        }\n        this._entries = {};\n        this._deleted = true;\n    }\n}\nconst $ab5e2177693188e6$var$fs = new $ab5e2177693188e6$export$61db58e71d795906('');\nvar $ab5e2177693188e6$export$2e2bcd8739ae039 = ()=>$ab5e2177693188e6$var$fs;\n\n});\n\n\n//# sourceMappingURL=memory.7c76c31c.js.map\n","import { errors } from '../util.js'\nimport config from '../config.js'\n\nconst { File, Blob, DOMException } = config\nconst { INVALID, GONE, MISMATCH, MOD_ERR, SYNTAX, SECURITY, DISALLOWED } = errors\n\nexport class Sink {\n\n  /**\n   * @param {FileHandle} fileHandle\n   * @param {File} file\n   */\n  constructor (fileHandle, file) {\n    this.fileHandle = fileHandle\n    this.file = file\n    this.size = file.size\n    this.position = 0\n  }\n\n  write (chunk) {\n    let file = this.file\n\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.position = chunk.position\n          if (this.size < chunk.position) {\n            this.file = new File(\n              [this.file, new ArrayBuffer(chunk.position - this.size)],\n              this.file.name,\n              this.file\n            )\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException(...SYNTAX('write requires a data argument'))\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          if (this.size < chunk.position) {\n            throw new DOMException(...INVALID)\n          }\n          this.position = chunk.position\n          return\n        } else {\n          throw new DOMException(...SYNTAX('seek requires a position argument'))\n        }\n      } else if (chunk.type === 'truncate') {\n        if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n          file = chunk.size < this.size\n            ? new File([file.slice(0, chunk.size)], file.name, file)\n            : new File([file, new Uint8Array(chunk.size - this.size)], file.name)\n\n          this.size = file.size\n          if (this.position > file.size) {\n            this.position = file.size\n          }\n          this.file = file\n          return\n        } else {\n          throw new DOMException(...SYNTAX('truncate requires a size argument'))\n        }\n      }\n    }\n\n    chunk = new Blob([chunk])\n\n    let blob = this.file\n    // Calc the head and tail fragments\n    const head = blob.slice(0, this.position)\n    const tail = blob.slice(this.position + chunk.size)\n\n    // Calc the padding\n    let padding = this.position - head.size\n    if (padding < 0) {\n      padding = 0\n    }\n    blob = new File([\n      head,\n      new Uint8Array(padding),\n      chunk,\n      tail\n    ], blob.name)\n\n    this.size = blob.size\n    this.position += chunk.size\n\n    this.file = blob\n  }\n  close () {\n    if (this.fileHandle._deleted) throw new DOMException(...GONE)\n    this.fileHandle._file = this.file\n    this.file =\n    this.position =\n    this.size = null\n    if (this.fileHandle.onclose) {\n      this.fileHandle.onclose(this.fileHandle)\n    }\n  }\n}\n\nexport class FileHandle {\n  constructor (name = '', file = new File([], name), writable = true) {\n    this._file = file\n    this.name = name\n    this.kind = 'file'\n    this._deleted = false\n    this.writable = writable\n    this.readable = true\n  }\n\n  async getFile () {\n    if (this._deleted) throw new DOMException(...GONE)\n    return this._file\n  }\n\n  async createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n    if (this._deleted) throw new DOMException(...GONE)\n\n    const file = opts.keepExistingData\n      ? await this.getFile()\n      : new File([], this.name)\n\n    return new Sink(this, file)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  async _destroy () {\n    this._deleted = true\n    this._file = null\n  }\n}\n\nexport class FolderHandle {\n\n  /** @param {string} name */\n  constructor (name, writable = true) {\n    this.name = name\n    this.kind = 'directory'\n    this._deleted = false\n    /** @type {Object.<string, (FolderHandle|FileHandle)>} */\n    this._entries = {}\n    this.writable = writable\n    this.readable = true\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    if (this._deleted) throw new DOMException(...GONE)\n    yield* Object.entries(this._entries)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getDirectoryHandle (name, opts) {\n    if (this._deleted) throw new DOMException(...GONE)\n    const entry = this._entries[name]\n    if (entry) { // entry exist\n      if (entry instanceof FileHandle) {\n        throw new DOMException(...MISMATCH)\n      } else {\n        return entry\n      }\n    } else {\n      if (opts.create) {\n        return (this._entries[name] = new FolderHandle(name))\n      } else {\n        throw new DOMException(...GONE)\n      }\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getFileHandle (name, opts) {\n    const entry = this._entries[name]\n    const isFile = entry instanceof FileHandle\n    if (entry && isFile) return entry\n    if (entry && !isFile) throw new DOMException(...MISMATCH)\n    if (!entry && !opts.create) throw new DOMException(...GONE)\n    if (!entry && opts.create) {\n      return (this._entries[name] = new FileHandle(name))\n    }\n  }\n\n  async removeEntry (name, opts) {\n    const entry = this._entries[name]\n    if (!entry) throw new DOMException(...GONE)\n    await entry._destroy(opts.recursive)\n    delete this._entries[name]\n  }\n\n  async _destroy (recursive) {\n    for (let x of Object.values(this._entries)) {\n      if (!recursive) throw new DOMException(...MOD_ERR)\n      await x._destroy(recursive)\n    }\n    this._entries = {}\n    this._deleted = true\n  }\n}\n\nconst fs = new FolderHandle('')\n\nexport default () => fs\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","value","$ab5e2177693188e6$export$e287445474a1d9bf","$ab5e2177693188e6$export$8bdd21c705ef8d22","$ab5e2177693188e6$export$61db58e71d795906","$ab5e2177693188e6$export$2e2bcd8739ae039","$cFLn4","File","$ab5e2177693188e6$var$File","Blob","$ab5e2177693188e6$var$Blob","DOMException","$ab5e2177693188e6$var$DOMException","$a2zud","default","INVALID","$ab5e2177693188e6$var$INVALID","GONE","$ab5e2177693188e6$var$GONE","MISMATCH","$ab5e2177693188e6$var$MISMATCH","MOD_ERR","$ab5e2177693188e6$var$MOD_ERR","SYNTAX","$ab5e2177693188e6$var$SYNTAX","SECURITY","$ab5e2177693188e6$var$SECURITY","DISALLOWED","$ab5e2177693188e6$var$DISALLOWED","errors","fileHandle","file","size","position","write","chunk","type","Number","isInteger","ArrayBuffer","name","data","slice","Uint8Array","blob","head","tail","padding","close","_deleted","_file","onclose","writable","kind","readable","getFile","createWritable","opts","keepExistingData","isSameEntry","other","_destroy","_entries","entries","getDirectoryHandle","entry","create","getFileHandle","isFile","removeEntry","recursive","x","values","$ab5e2177693188e6$var$fs"],"version":3,"file":"memory.7c76c31c.js.map"}